From 90b75ca8d5bbf8bf279f832d5801df2eb60b6ac9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Florian=20M=C3=BCllner?= <fmuellner@gnome.org>
Date: Mon, 15 Jul 2019 18:51:30 +0200
Subject: [PATCH] tools: Port to python3

---
 configure.ac                 |  2 +-
 tools/glib-ginterface-gen.py | 26 ++++++++++++--------------
 tools/libglibcodegen.py      |  5 ++---
 3 files changed, 15 insertions(+), 18 deletions(-)

diff --git a/configure.ac b/configure.ac
index 02a5966..dfe9a88 100644
--- a/configure.ac
+++ b/configure.ac
@@ -105,7 +105,7 @@ AC_CHECK_PROGS([XSLTPROC], [xsltproc])
 AS_IF([test -z "$XSLTPROC"],
   [AC_MSG_ERROR([xsltproc (from the libxslt source package) is required])])
 
-AM_PATH_PYTHON([2.3])
+AM_PATH_PYTHON([3.6])
 
 dnl check for a version of python that can run the twisted tests
 AC_MSG_CHECKING([for Python with Twisted and IRC protocol support])
diff --git a/tools/glib-ginterface-gen.py b/tools/glib-ginterface-gen.py
index 8fea5df..2ef7b43 100644
--- a/tools/glib-ginterface-gen.py
+++ b/tools/glib-ginterface-gen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 # glib-ginterface-gen.py: service-side interface generator
 #
@@ -27,7 +27,7 @@ import os.path
 import xml.dom.minidom
 
 from libtpcodegen import file_set_contents
-from libglibcodegen import Signature, type_to_gtype, cmp_by_name, \
+from libglibcodegen import Signature, type_to_gtype, \
         NS_TP, dbus_gutils_wincaps_to_uscore
 
 
@@ -85,18 +85,18 @@ class Generator(object):
         self.allow_havoc = allow_havoc
 
     def h(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__header.append(s)
 
     def b(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__body.append(s)
 
     def d(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__docs.append(s)
 
     def do_node(self, node):
@@ -733,13 +733,14 @@ class Generator(object):
 
     def __call__(self):
         nodes = self.dom.getElementsByTagName('node')
-        nodes.sort(cmp_by_name)
+        nodes.sort(key=lambda node : node.getAttributeNode('name').nodeValue)
 
         self.h('#include <glib-object.h>')
         self.h('#include <dbus/dbus-glib.h>')
 
         if self.have_properties(nodes):
             self.h('#include <telepathy-glib/telepathy-glib.h>')
+        self.h('')
 
         self.h('')
         self.h('G_BEGIN_DECLS')
@@ -747,9 +748,6 @@ class Generator(object):
 
         self.b('#include "%s.h"' % self.basename)
         self.b('')
-        for header in self.headers:
-            self.b('#include %s' % header)
-        self.b('')
 
         for node in nodes:
             self.do_node(node)
@@ -768,7 +766,7 @@ class Generator(object):
         file_set_contents(self.basename + '-gtk-doc.h', '\n'.join(self.__docs))
 
 def cmdline_error():
-    print """\
+    print('''
 usage:
     gen-ginterface [OPTIONS] xmlfile Prefix_
 options:
@@ -788,7 +786,7 @@ options:
             void symbol (DBusGMethodInvocation *context)
         and return some sort of "not implemented" error via
             dbus_g_method_return_error (context, ...)
-"""
+''')
     sys.exit(1)
 
 
diff --git a/tools/libglibcodegen.py b/tools/libglibcodegen.py
index 6a9d214..5789609 100644
--- a/tools/libglibcodegen.py
+++ b/tools/libglibcodegen.py
@@ -23,7 +23,6 @@ please make any changes there.
 
 from libtpcodegen import NS_TP, \
                          Signature, \
-                         cmp_by_name, \
                          escape_as_identifier, \
                          get_by_path, \
                          get_descendant_text, \
@@ -154,7 +153,7 @@ def type_to_gtype(s):
         return ("GHashTable *", "DBUS_TYPE_G_STRING_STRING_HASHTABLE", "BOXED", False)
     elif s[:2] == 'a{':  #some arbitrary hash tables
         if s[2] not in ('y', 'b', 'n', 'q', 'i', 'u', 's', 'o', 'g'):
-            raise Exception, "can't index a hashtable off non-basic type " + s
+            raise Exception("can't index a hashtable off non-basic type " + s)
         first = type_to_gtype(s[2])
         second = type_to_gtype(s[3:-1])
         return ("GHashTable *", "(dbus_g_type_get_map (\"GHashTable\", " + first[1] + ", " + second[1] + "))", "BOXED", False)
@@ -169,4 +168,4 @@ def type_to_gtype(s):
         return ("GValueArray *", gtype, "BOXED", True)
 
     # we just don't know ..
-    raise Exception, "don't know the GType for " + s
+    raise Exception("don't know the GType for " + s)
-- 
2.21.0

