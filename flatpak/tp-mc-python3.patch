From ed91bdf3d8220ef84ced881829781952339e3487 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Florian=20M=C3=BCllner?= <fmuellner@gnome.org>
Date: Mon, 15 Jul 2019 17:50:38 +0200
Subject: [PATCH] tools: Move to python3

Python 2 is barely alive, time to port build tools over to python 3.
---
 configure.ac                        |  2 +-
 tools/glib-blocking-client-gen.py   |  6 +++---
 tools/glib-client-gen.py            | 18 +++++++++---------
 tools/glib-client-marshaller-gen.py | 22 +++++++++++-----------
 tools/glib-ginterface-gen.py        | 22 +++++++++++-----------
 tools/glib-gtypes-generator.py      |  8 ++++----
 tools/glib-signals-marshal-gen.py   |  6 +++---
 tools/libglibcodegen.py             |  5 ++---
 tools/libtpcodegen.py               |  5 ++++-
 9 files changed, 48 insertions(+), 46 deletions(-)

diff --git a/configure.ac b/configure.ac
index cf9d290f..f405557b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -84,7 +84,7 @@ if test -z "$XSLTPROC"; then
     AC_MSG_ERROR([xsltproc (from the libxslt source package) is required])
 fi
 
-AM_PATH_PYTHON([2.6])
+AM_PATH_PYTHON([3.6])
 AC_MSG_CHECKING([for enough Python for the tests])
 mc_want_twisted_tests=no
 if $PYTHON -c "import twisted.internet.reactor, dbus.mainloop.glib"\
diff --git a/tools/glib-blocking-client-gen.py b/tools/glib-blocking-client-gen.py
index c20dcd4a..e38825c1 100644
--- a/tools/glib-blocking-client-gen.py
+++ b/tools/glib-blocking-client-gen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 # glib-client-gen.py: "I Can't Believe It's Not dbus-binding-tool"
 #
@@ -27,7 +27,7 @@ import os.path
 import xml.dom.minidom
 from getopt import gnu_getopt
 
-from libglibcodegen import Signature, type_to_gtype, cmp_by_name, \
+from libglibcodegen import Signature, type_to_gtype, \
         camelcase_to_lower, get_docstring
 
 
@@ -945,7 +945,7 @@ class Generator(object):
         self.b('')
 
         nodes = self.dom.getElementsByTagName('node')
-        nodes.sort(cmp_by_name)
+        nodes.sort(key=lambda node: node.getAttributeNode('name').nodeValue)
 
         for node in nodes:
             self.do_interface(node)
diff --git a/tools/glib-client-gen.py b/tools/glib-client-gen.py
index f8465a62..6e164b33 100644
--- a/tools/glib-client-gen.py
+++ b/tools/glib-client-gen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 # glib-client-gen.py: "I Can't Believe It's Not dbus-binding-tool"
 #
@@ -28,7 +28,7 @@ import xml.dom.minidom
 from getopt import gnu_getopt
 
 from libtpcodegen import file_set_contents
-from libglibcodegen import Signature, type_to_gtype, cmp_by_name, \
+from libglibcodegen import Signature, type_to_gtype, \
         get_docstring, xml_escape, get_deprecated
 
 
@@ -74,18 +74,18 @@ class Generator(object):
         self.guard = opts.get('--guard', None)
 
     def h(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__header.append(s)
 
     def b(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__body.append(s)
 
     def d(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__docs.append(s)
 
     def get_iface_quark(self):
@@ -1191,7 +1191,7 @@ class Generator(object):
         self.b('')
 
         nodes = self.dom.getElementsByTagName('node')
-        nodes.sort(cmp_by_name)
+        nodes.sort(key=lambda node: node.getAttributeNode('name').nodeValue)
 
         for node in nodes:
             self.do_interface(node)
diff --git a/tools/glib-client-marshaller-gen.py b/tools/glib-client-marshaller-gen.py
index cb27d638..0ac81932 100644
--- a/tools/glib-client-marshaller-gen.py
+++ b/tools/glib-client-marshaller-gen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 import sys
 import xml.dom.minidom
@@ -31,23 +31,23 @@ class Generator(object):
         for signal in signals:
             self.do_signal(signal)
 
-        print 'void'
-        print '%s_register_dbus_glib_marshallers (void)' % self.prefix
-        print '{'
+        print('void')
+        print('%s_register_dbus_glib_marshallers (void)' % self.prefix)
+        print('{')
 
         all = self.marshallers.keys()
-        all.sort()
+        sorted(all)
         for marshaller in all:
             rhs = self.marshallers[marshaller]
 
-            print '  dbus_g_object_register_marshaller ('
-            print '      g_cclosure_marshal_generic,'
-            print '      G_TYPE_NONE,       /* return */'
+            print('  dbus_g_object_register_marshaller (')
+            print('      g_cclosure_marshal_generic,')
+            print('      G_TYPE_NONE,       /* return */')
             for type in rhs:
-                print '      G_TYPE_%s,' % type.replace('VOID', 'NONE')
-            print '      G_TYPE_INVALID);'
+                print('      G_TYPE_%s,' % type.replace('VOID', 'NONE'))
+            print('      G_TYPE_INVALID);')
 
-        print '}'
+        print('}')
 
 
 def types_to_gtypes(types):
diff --git a/tools/glib-ginterface-gen.py b/tools/glib-ginterface-gen.py
index 6fec0d3c..2421e721 100644
--- a/tools/glib-ginterface-gen.py
+++ b/tools/glib-ginterface-gen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 # glib-ginterface-gen.py: service-side interface generator
 #
@@ -27,7 +27,7 @@ import os.path
 import xml.dom.minidom
 
 from libtpcodegen import file_set_contents
-from libglibcodegen import Signature, type_to_gtype, cmp_by_name, \
+from libglibcodegen import Signature, type_to_gtype, \
         NS_TP, dbus_gutils_wincaps_to_uscore
 
 
@@ -85,18 +85,18 @@ class Generator(object):
         self.allow_havoc = allow_havoc
 
     def h(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__header.append(s)
 
     def b(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__body.append(s)
 
     def d(self, s):
-        if isinstance(s, unicode):
-            s = s.encode('utf-8')
+        if isinstance(s, bytes):
+            s = str(s, 'ascii')
         self.__docs.append(s)
 
     def do_node(self, node):
@@ -733,7 +733,7 @@ class Generator(object):
 
     def __call__(self):
         nodes = self.dom.getElementsByTagName('node')
-        nodes.sort(cmp_by_name)
+        nodes.sort(key=lambda node : node.getAttributeNode('name').nodeValue)
 
         self.h('#include <glib-object.h>')
         self.h('#include <dbus/dbus-glib.h>')
@@ -766,7 +766,7 @@ class Generator(object):
         file_set_contents(self.basename + '-gtk-doc.h', '\n'.join(self.__docs))
 
 def cmdline_error():
-    print """\
+    print('''
 usage:
     gen-ginterface [OPTIONS] xmlfile Prefix_
 options:
@@ -786,7 +786,7 @@ options:
             void symbol (DBusGMethodInvocation *context)
         and return some sort of "not implemented" error via
             dbus_g_method_return_error (context, ...)
-"""
+''')
     sys.exit(1)
 
 
diff --git a/tools/glib-gtypes-generator.py b/tools/glib-gtypes-generator.py
index 21dfc6aa..27faa1a2 100644
--- a/tools/glib-gtypes-generator.py
+++ b/tools/glib-gtypes-generator.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 # Generate GLib GInterfaces from the Telepathy specification.
 # The master copy of this program is in the telepathy-glib repository -
@@ -68,13 +68,13 @@ class GTypesGenerator(object):
         self.need_other_arrays = {}
 
     def h(self, code):
-        self.header.append(code.encode("utf-8"))
+        self.header.append(code)
 
     def c(self, code):
-        self.body.append(code.encode("utf-8"))
+        self.body.append(code)
 
     def d(self, code):
-        self.docs.append(code.encode('utf-8'))
+        self.docs.append(code)
 
     def do_mapping_header(self, mapping):
         members = mapping.getElementsByTagNameNS(NS_TP, 'member')
diff --git a/tools/glib-signals-marshal-gen.py b/tools/glib-signals-marshal-gen.py
index 0d02c134..6746f0e4 100644
--- a/tools/glib-signals-marshal-gen.py
+++ b/tools/glib-signals-marshal-gen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 import sys
 import xml.dom.minidom
@@ -42,11 +42,11 @@ class Generator(object):
             self.do_signal(signal)
 
         all = self.marshallers.keys()
-        all.sort()
+        sorted(all)
         for marshaller in all:
             rhs = self.marshallers[marshaller]
             if not marshaller.startswith('g_cclosure'):
-                print 'VOID:' + ','.join(rhs)
+                print('VOID:' + ','.join(rhs))
 
 if __name__ == '__main__':
     argv = sys.argv[1:]
diff --git a/tools/libglibcodegen.py b/tools/libglibcodegen.py
index 6a9d2148..57896099 100644
--- a/tools/libglibcodegen.py
+++ b/tools/libglibcodegen.py
@@ -23,7 +23,6 @@ please make any changes there.
 
 from libtpcodegen import NS_TP, \
                          Signature, \
-                         cmp_by_name, \
                          escape_as_identifier, \
                          get_by_path, \
                          get_descendant_text, \
@@ -154,7 +153,7 @@ def type_to_gtype(s):
         return ("GHashTable *", "DBUS_TYPE_G_STRING_STRING_HASHTABLE", "BOXED", False)
     elif s[:2] == 'a{':  #some arbitrary hash tables
         if s[2] not in ('y', 'b', 'n', 'q', 'i', 'u', 's', 'o', 'g'):
-            raise Exception, "can't index a hashtable off non-basic type " + s
+            raise Exception("can't index a hashtable off non-basic type " + s)
         first = type_to_gtype(s[2])
         second = type_to_gtype(s[3:-1])
         return ("GHashTable *", "(dbus_g_type_get_map (\"GHashTable\", " + first[1] + ", " + second[1] + "))", "BOXED", False)
@@ -169,4 +168,4 @@ def type_to_gtype(s):
         return ("GValueArray *", gtype, "BOXED", True)
 
     # we just don't know ..
-    raise Exception, "don't know the GType for " + s
+    raise Exception("don't know the GType for " + s)
diff --git a/tools/libtpcodegen.py b/tools/libtpcodegen.py
index 7e9eb9a5..8e052c28 100644
--- a/tools/libtpcodegen.py
+++ b/tools/libtpcodegen.py
@@ -167,7 +167,10 @@ class _SignatureIter:
     def __init__(self, string):
         self.remaining = string
 
-    def next(self):
+    def __iter__(self):
+        self
+
+    def __next__(self):
         if self.remaining == '':
             raise StopIteration
 
-- 
2.21.0

